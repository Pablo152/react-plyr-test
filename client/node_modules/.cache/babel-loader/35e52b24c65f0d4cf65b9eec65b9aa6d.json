{"ast":null,"code":"var _jsxFileName = \"/home/pabloazuaje/test-react-plyr/src/components/ReactPlyr.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Plyr from \"plyr\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReactPlyr = ({\n  sources,\n  type,\n  ...props\n}) => {\n  _s();\n\n  useEffect(() => {\n    const player = new Plyr(\"#player\"); // events\n    // https://github.com/sampotts/plyr#standard-media-events\n    // progress event, pass in onProgress as props\n\n    player.on(\"progress\", event => {\n      var _props$onProgress;\n\n      (_props$onProgress = props.onProgress) === null || _props$onProgress === void 0 ? void 0 : _props$onProgress.call(props, event);\n    }); // play event, pass in onPlay as props\n\n    player.on(\"play\", event => {\n      var _props$onPlay;\n\n      (_props$onPlay = props.onPlay) === null || _props$onPlay === void 0 ? void 0 : _props$onPlay.call(props, event);\n    }); // playing event, pass in onPlaying as props\n\n    player.on(\"playing\", event => {\n      var _props$onPlaying;\n\n      (_props$onPlaying = props.onPlaying) === null || _props$onPlaying === void 0 ? void 0 : _props$onPlaying.call(props, event);\n    }); // pause event, pass in onPause as props\n\n    player.on(\"pause\", event => {\n      var _props$onPause;\n\n      (_props$onPause = props.onPause) === null || _props$onPause === void 0 ? void 0 : _props$onPause.call(props, event);\n    }); // playing event, pass in onTimeUpdate as props\n\n    player.on(\"timeupdate\", event => {\n      var _props$onTimeUpdate;\n\n      (_props$onTimeUpdate = props.onTimeUpdate) === null || _props$onTimeUpdate === void 0 ? void 0 : _props$onTimeUpdate.call(props, event);\n    }); // volumechange event, pass in onVolumeChange as props\n\n    player.on(\"volumechange\", event => {\n      var _props$onVolumeChange;\n\n      (_props$onVolumeChange = props.onVolumeChange) === null || _props$onVolumeChange === void 0 ? void 0 : _props$onVolumeChange.call(props, event);\n    }); // seeking event, pass in onSeeking as props\n\n    player.on(\"seeking\", event => {\n      var _props$onSeeking;\n\n      (_props$onSeeking = props.onSeeking) === null || _props$onSeeking === void 0 ? void 0 : _props$onSeeking.call(props, event);\n    }); // seeked event, pass in onSeeked as props\n\n    player.on(\"seeked\", event => {\n      var _props$onSeeked;\n\n      (_props$onSeeked = props.onSeeked) === null || _props$onSeeked === void 0 ? void 0 : _props$onSeeked.call(props, event);\n    }); // ratechange event, pass in onRateChange as props\n\n    player.on(\"ratechange\", event => {\n      var _props$onRateChange;\n\n      (_props$onRateChange = props.onRateChange) === null || _props$onRateChange === void 0 ? void 0 : _props$onRateChange.call(props, event);\n    }); // enterfullscreen event, pass in onEnterFullScreen as props\n\n    player.on(\"enterfullscreen\", event => {\n      var _props$onEnterFullScr;\n\n      (_props$onEnterFullScr = props.onEnterFullScreen) === null || _props$onEnterFullScr === void 0 ? void 0 : _props$onEnterFullScr.call(props, event);\n    }); // exitfullscreen event, pass in onExitFullScreen as props\n\n    player.on(\"exitfullscreen\", event => {\n      var _props$onExitFullScre;\n\n      (_props$onExitFullScre = props.onExitFullScreen) === null || _props$onExitFullScre === void 0 ? void 0 : _props$onExitFullScre.call(props, event);\n    }); // captionsenabled event, pass in onCaptionsEnabled as props\n\n    player.on(\"captionsenabled\", event => {\n      var _props$onCaptionsEnab;\n\n      (_props$onCaptionsEnab = props.onCaptionsEnabled) === null || _props$onCaptionsEnab === void 0 ? void 0 : _props$onCaptionsEnab.call(props, event);\n    }); // captionsdisabled event, pass in onCaptionsDisabled as props\n\n    player.on(\"captionsdisabled\", event => {\n      var _props$onCaptionsDisa;\n\n      (_props$onCaptionsDisa = props.onCaptionsDisabled) === null || _props$onCaptionsDisa === void 0 ? void 0 : _props$onCaptionsDisa.call(props, event);\n    }); // languagechange event, pass in onLanguageChange as props\n\n    player.on(\"languagechange\", event => {\n      var _props$onLanguageChan;\n\n      (_props$onLanguageChan = props.onLanguageChange) === null || _props$onLanguageChan === void 0 ? void 0 : _props$onLanguageChan.call(props, event);\n    }); // controlshidden event, pass in onControlsHidden as props\n\n    player.on(\"controlshidden\", event => {\n      var _props$onControlsHidd;\n\n      (_props$onControlsHidd = props.onControlsHidden) === null || _props$onControlsHidd === void 0 ? void 0 : _props$onControlsHidd.call(props, event);\n    }); // controlsshown event, pass in onControlsShown as props\n\n    player.on(\"controlsshown\", event => {\n      var _props$onControlsShow;\n\n      (_props$onControlsShow = props.onControlsShown) === null || _props$onControlsShow === void 0 ? void 0 : _props$onControlsShow.call(props, event);\n    }); // ready event, pass in onReady as props\n\n    player.on(\"ready\", event => {\n      var _props$onReady;\n\n      (_props$onReady = props.onReady) === null || _props$onReady === void 0 ? void 0 : _props$onReady.call(props, event);\n    });\n  }, [sources, type, props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"plyr__video-embed\",\n    id: \"player\",\n    style: {\n      minHeight: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n      title: \"hello\",\n      allowTransparency: true,\n      src: `${sources[0].src}?iv_load_policy=3&amp;modestbranding=1&amp;playsinline=1&amp;showinfo=0&amp;rel=0&amp;enablejsapi=1`,\n      allow: \"autoplay\"\n    }, sources[0].src, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ReactPlyr, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ReactPlyr;\nexport default ReactPlyr;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactPlyr\");","map":{"version":3,"sources":["/home/pabloazuaje/test-react-plyr/src/components/ReactPlyr.tsx"],"names":["React","useEffect","Plyr","ReactPlyr","sources","type","props","player","on","event","onProgress","onPlay","onPlaying","onPause","onTimeUpdate","onVolumeChange","onSeeking","onSeeked","onRateChange","onEnterFullScreen","onExitFullScreen","onCaptionsEnabled","onCaptionsDisabled","onLanguageChange","onControlsHidden","onControlsShown","onReady","minHeight","src"],"mappings":"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","sourcesContent":["import React, { useEffect, FunctionComponent } from \"react\";\nimport Plyr from \"plyr\";\n\nexport type Provider = Plyr.Provider;\nexport type Event = Plyr.PlyrEvent;\n\ntype ReactPlyrProps = {\n  sources: Plyr.Source[];\n  type: Plyr.MediaType;\n  onProgress?: (event: Event) => void;\n  onPlay?: (event: Event) => void;\n  onPlaying?: (event: Event) => void;\n  onPause?: (event: Event) => void;\n  onTimeUpdate?: (event: Event) => void;\n  onVolumeChange?: (event: Event) => void;\n  onSeeking?: (event: Event) => void;\n  onSeeked?: (event: Event) => void;\n  onRateChange?: (event: Event) => void;\n  onEnterFullScreen?: (event: Event) => void;\n  onExitFullScreen?: (event: Event) => void;\n  onCaptionsEnabled?: (event: Event) => void;\n  onCaptionsDisabled?: (event: Event) => void;\n  onLanguageChange?: (event: Event) => void;\n  onControlsHidden?: (event: Event) => void;\n  onControlsShown?: (event: Event) => void;\n  onReady?: (event: Event) => void;\n};\n\nconst ReactPlyr: FunctionComponent<ReactPlyrProps> = ({\n  sources,\n  type,\n  ...props\n}): JSX.Element => {\n  useEffect(() => {\n    const player = new Plyr(\"#player\");\n\n    // events\n    // https://github.com/sampotts/plyr#standard-media-events\n\n    // progress event, pass in onProgress as props\n    player.on(\"progress\", (event) => {\n      props.onProgress?.(event);\n    });\n\n    // play event, pass in onPlay as props\n    player.on(\"play\", (event: Event) => {\n      props.onPlay?.(event);\n    });\n\n    // playing event, pass in onPlaying as props\n    player.on(\"playing\", (event: Event) => {\n      props.onPlaying?.(event);\n    });\n\n    // pause event, pass in onPause as props\n    player.on(\"pause\", (event: Event) => {\n      props.onPause?.(event);\n    });\n\n    // playing event, pass in onTimeUpdate as props\n    player.on(\"timeupdate\", (event: Event) => {\n      props.onTimeUpdate?.(event);\n    });\n\n    // volumechange event, pass in onVolumeChange as props\n    player.on(\"volumechange\", (event: Event) => {\n      props.onVolumeChange?.(event);\n    });\n\n    // seeking event, pass in onSeeking as props\n    player.on(\"seeking\", (event: Event) => {\n      props.onSeeking?.(event);\n    });\n\n    // seeked event, pass in onSeeked as props\n    player.on(\"seeked\", (event: Event) => {\n      props.onSeeked?.(event);\n    });\n\n    // ratechange event, pass in onRateChange as props\n    player.on(\"ratechange\", (event: Event) => {\n      props.onRateChange?.(event);\n    });\n\n    // enterfullscreen event, pass in onEnterFullScreen as props\n    player.on(\"enterfullscreen\", (event: Event) => {\n      props.onEnterFullScreen?.(event);\n    });\n\n    // exitfullscreen event, pass in onExitFullScreen as props\n    player.on(\"exitfullscreen\", (event: Event) => {\n      props.onExitFullScreen?.(event);\n    });\n\n    // captionsenabled event, pass in onCaptionsEnabled as props\n    player.on(\"captionsenabled\", (event: Event) => {\n      props.onCaptionsEnabled?.(event);\n    });\n\n    // captionsdisabled event, pass in onCaptionsDisabled as props\n    player.on(\"captionsdisabled\", (event: Event) => {\n      props.onCaptionsDisabled?.(event);\n    });\n\n    // languagechange event, pass in onLanguageChange as props\n    player.on(\"languagechange\", (event: Event) => {\n      props.onLanguageChange?.(event);\n    });\n\n    // controlshidden event, pass in onControlsHidden as props\n    player.on(\"controlshidden\", (event: Event) => {\n      props.onControlsHidden?.(event);\n    });\n\n    // controlsshown event, pass in onControlsShown as props\n    player.on(\"controlsshown\", (event: Event) => {\n      props.onControlsShown?.(event);\n    });\n\n    // ready event, pass in onReady as props\n    player.on(\"ready\", (event: Event) => {\n      props.onReady?.(event);\n    });\n  }, [sources, type, props]);\n\n  return (\n    <div\n      className=\"plyr__video-embed\"\n      id=\"player\"\n      style={{ minHeight: \"100vh\" }}\n    >\n      <iframe\n        key={sources[0].src}\n        title=\"hello\"\n        allowTransparency\n        src={`${sources[0].src}?iv_load_policy=3&amp;modestbranding=1&amp;playsinline=1&amp;showinfo=0&amp;rel=0&amp;enablejsapi=1`}\n        allow=\"autoplay\"\n      ></iframe>\n    </div>\n  );\n};\n\nexport default ReactPlyr;\n"]},"metadata":{},"sourceType":"module"}